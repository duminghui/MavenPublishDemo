apply plugin: 'maven-publish'


def getRepositoryUrl() {
    if (POM_VERSION_NAME.contains("SNAPSHOT")) {
        return SNAPSHOT_REPOSITORY_URL
    }
    return RELEASE_REPOSITORY_URL
}

def getCanPackageDependencies() {
    def dep_names = hasProperty('PACKAGE_DEPENDENCIES_NAMES') ? "$PACKAGE_DEPENDENCIES_NAMES".split(',') : []
    println '###package denpendencies start###'
    project.android.libraryVariants.toList().first().javaCompile.classpath.files.findAll { file ->
        println "**#find:$file.absolutePath"
        dep_names.find {
            file.absolutePath.contains(it)
        }
    }.collect {
        println "[$POM_ARTIFACT_ID]#packaged:$it"
        zipTree(it)
    }
    println '###package denpendencies end### '
}

afterEvaluate {
//    android.libraryVariants.all { variant ->
//        println("=====${variant.name.capitalize()}")
//        def jarTask = project.tasks.create(name: "androidJavaJar${variant.name.capitalize()}", type: Jar) {
//            from variant.javaCompile.destinationDir
//            exclude "**/R.class"
//            exclude "**/BuildConfig.class"
//        }
//        jarTask.dependsOn variant.javaCompile
//    }

    android.libraryVariants.all { variant ->
        def name = variant.buildType.name
//com.android.builder.core.BuilderConstants.RELEASE
        if (name == 'release') {
            def jarTask = project.tasks.create(name: "androidJar${variant.name.capitalize()}", type: Jar) {
                from variant.javaCompile.destinationDir, getCanPackageDependencies()
                exclude "**/R.class"
                exclude "**/BuildConfig.class"
            }
            jarTask.dependsOn variant.javaCompile
//            artifacts.add('archives', jarTask);
        }
    }

//先不用这种方式代替上面，影响javadoc
//   task demo(type:Jar,dependsOn: project.android.libraryVariants.toList().first().javaCompile){
//        from project.android.libraryVariants.toList().first().javaCompile.destinationDir
//    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
        println '######javaDoc classpath######'
        println "*classpath:${classpath.files}"
        println '######javaDoc classpath######'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }


    publishing {
        publications {
            maven(MavenPublication) {
                pom {
                    artifactId POM_ARTIFACT_ID
                    groupId POM_GROUP_ID
                    version POM_VERSION_NAME
                    packaging POM_PACKAGING
                }
                pom.withXml {
                    println("${asString()}")
                }
                artifact bundleRelease
                artifact androidJarRelease
                artifact androidJavadocsJar
                artifact androidSourcesJar
            }
        }

        repositories {
            maven {
                credentials {
                    username = NEXUS_USERNAME
                    password = NEXUS_PASSWORD
                }
                url getRepositoryUrl() as String
            }
        }
    }

//    project.publishing.publications.maven.properties.each{k,v ->
//        println "$k : $v"
//    }


}

